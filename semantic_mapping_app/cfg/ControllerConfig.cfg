#!/usr/bin/env python
PACKAGE = "semantic_mapping_app"

import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()


#matchers_enum = gen.enum([ gen.const("FLANN", int_t, 0, "FLANN"),
#                  gen.const("Bruteforce_Hamming_1", int_t, 1, "Bruteforce_Hamming_1"),
#                  gen.const("Bruteforce_Hamming_2", int_t, 2, "Bruteforce_Hamming_2"),
#                  gen.const("Bruteforce_L1", int_t, 3, "Bruteforce_L1"),
#                  gen.const("Bruteforce_L2", int_t, 4, "Bruteforce_L2"),],
#                  "Extractor Matchers")
#gen.add("descriptor_matcher", int_t, 0, "Descriptor matcher", 0, 0, 1, edit_method=matchers_enum)
#gen.add("feature_detector_parameter_name", str_t, 0, "Enter the name of a algorithm parameter to change", "nFeatures")
#gen.add("max_radius_search_dist", double_t, 0, "radius search threshold", .5, 0, 2000)
#gen.add("horizontal_matches", bool_t, 0, "Horizontal matches", False)
#gen.add("horizontal_threshold", int_t, 0, "Horizontal matches threshold", 1, 0, 100)

gen.add("import_scan", bool_t, 0, "import_scan", False)
gen.add("mesh_filename", str_t, 0, "path to the mesh", "")

gen.add("align_to_principle_axis", bool_t, 0, "align_to_principle_axis", False)

gen.add("extract_ROI", bool_t, 0, "extract_ROI", False)
gen.add("ROI_origin_x", double_t, 0, "ROI_origin_x", 0.0, -5.0, 5.0)
gen.add("ROI_origin_y", double_t, 0, "ROI_origin_y", 0.0, -5.0, 5.0)
gen.add("ROI_origin_z", double_t, 0, "ROI_origin_z", 0.0, -5.0, 5.0)
gen.add("ROI_size_x", double_t, 0, "ROI width", 0.0, 0.0, 5.0)
gen.add("ROI_size_y", double_t, 0, "ROI length", 0.0, 0.0, 5.0)
gen.add("ROI_size_z", double_t, 0, "ROI height", 0.0, 0.0, 5.0)

gen.add("extract_normals_from_model", bool_t, 0, "extract_normals", False)
gen.add("segment_planes", bool_t, 0, "segment_planes", False)
gen.add("segment_fixtures", bool_t, 0, "segment_fixtures", False)
gen.add("display_all_segmented_features", bool_t, 0, "display_all_segmented_features", False)
gen.add("register_kinect_to_model", bool_t, 0, "register_kinect_to_model", False)
gen.add("mesh_registration_images_directory", str_t, 0, "path to images taken during registration", "")
gen.add("mesh_registration_transformations_directory", str_t, 0, "path transformation for respective images", "")

gen.add("reload_plane_segmenter", bool_t, 0, "reload_plane_segmenter", False)
gen.add("reload_fixture_segmenter", bool_t, 0, "reload_fixture_segmenter", False)

exit(gen.generate(PACKAGE, "semantic_mapping_app", "Controller"))

"""autogenerated by genpy from register_kinect_to_model/registerKinectToModelRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import sensor_msgs.msg

class registerKinectToModelRequest(genpy.Message):
  _md5sum = "23daeab5f3ee2e44f0f013470826f497"
  _type = "register_kinect_to_model/registerKinectToModelRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
sensor_msgs/Image[] registration_images


geometry_msgs/Transform[] registration_transforms


sensor_msgs/Image kinect_image


sensor_msgs/PointCloud2 kinect_cloud


================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

"""
  __slots__ = ['registration_images','registration_transforms','kinect_image','kinect_cloud']
  _slot_types = ['sensor_msgs/Image[]','geometry_msgs/Transform[]','sensor_msgs/Image','sensor_msgs/PointCloud2']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       registration_images,registration_transforms,kinect_image,kinect_cloud

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(registerKinectToModelRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.registration_images is None:
        self.registration_images = []
      if self.registration_transforms is None:
        self.registration_transforms = []
      if self.kinect_image is None:
        self.kinect_image = sensor_msgs.msg.Image()
      if self.kinect_cloud is None:
        self.kinect_cloud = sensor_msgs.msg.PointCloud2()
    else:
      self.registration_images = []
      self.registration_transforms = []
      self.kinect_image = sensor_msgs.msg.Image()
      self.kinect_cloud = sensor_msgs.msg.PointCloud2()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.registration_images)
      buff.write(_struct_I.pack(length))
      for val1 in self.registration_images:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.height, _x.width))
        _x = val1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_BI.pack(_x.is_bigendian, _x.step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.registration_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.registration_transforms:
        _v3 = val1.translation
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = val1.rotation
        _x = _v4
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_3I.pack(_x.kinect_image.header.seq, _x.kinect_image.header.stamp.secs, _x.kinect_image.header.stamp.nsecs))
      _x = self.kinect_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.kinect_image.height, _x.kinect_image.width))
      _x = self.kinect_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.kinect_image.is_bigendian, _x.kinect_image.step))
      _x = self.kinect_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.kinect_cloud.header.seq, _x.kinect_cloud.header.stamp.secs, _x.kinect_cloud.header.stamp.nsecs))
      _x = self.kinect_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.kinect_cloud.height, _x.kinect_cloud.width))
      length = len(self.kinect_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.kinect_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.kinect_cloud.is_bigendian, _x.kinect_cloud.point_step, _x.kinect_cloud.row_step))
      _x = self.kinect_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.kinect_cloud.is_dense))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.registration_images is None:
        self.registration_images = None
      if self.registration_transforms is None:
        self.registration_transforms = None
      if self.kinect_image is None:
        self.kinect_image = sensor_msgs.msg.Image()
      if self.kinect_cloud is None:
        self.kinect_cloud = sensor_msgs.msg.PointCloud2()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.registration_images = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Image()
        _v5 = val1.header
        start = end
        end += 4
        (_v5.seq,) = _struct_I.unpack(str[start:end])
        _v6 = _v5.stamp
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v5.frame_id = str[start:end].decode('utf-8')
        else:
          _v5.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.encoding = str[start:end].decode('utf-8')
        else:
          val1.encoding = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _struct_BI.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.registration_images.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.registration_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.rotation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.registration_transforms.append(val1)
      _x = self
      start = end
      end += 12
      (_x.kinect_image.header.seq, _x.kinect_image.header.stamp.secs, _x.kinect_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.kinect_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.kinect_image.height, _x.kinect_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_image.encoding = str[start:end].decode('utf-8')
      else:
        self.kinect_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.kinect_image.is_bigendian, _x.kinect_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_image.data = str[start:end].decode('utf-8')
      else:
        self.kinect_image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.kinect_cloud.header.seq, _x.kinect_cloud.header.stamp.secs, _x.kinect_cloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_cloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.kinect_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.kinect_cloud.height, _x.kinect_cloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.kinect_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.kinect_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.kinect_cloud.is_bigendian, _x.kinect_cloud.point_step, _x.kinect_cloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.kinect_cloud.is_bigendian = bool(self.kinect_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_cloud.data = str[start:end].decode('utf-8')
      else:
        self.kinect_cloud.data = str[start:end]
      start = end
      end += 1
      (self.kinect_cloud.is_dense,) = _struct_B.unpack(str[start:end])
      self.kinect_cloud.is_dense = bool(self.kinect_cloud.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.registration_images)
      buff.write(_struct_I.pack(length))
      for val1 in self.registration_images:
        _v9 = val1.header
        buff.write(_struct_I.pack(_v9.seq))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.height, _x.width))
        _x = val1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_BI.pack(_x.is_bigendian, _x.step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.registration_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.registration_transforms:
        _v11 = val1.translation
        _x = _v11
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v12 = val1.rotation
        _x = _v12
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_3I.pack(_x.kinect_image.header.seq, _x.kinect_image.header.stamp.secs, _x.kinect_image.header.stamp.nsecs))
      _x = self.kinect_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.kinect_image.height, _x.kinect_image.width))
      _x = self.kinect_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.kinect_image.is_bigendian, _x.kinect_image.step))
      _x = self.kinect_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.kinect_cloud.header.seq, _x.kinect_cloud.header.stamp.secs, _x.kinect_cloud.header.stamp.nsecs))
      _x = self.kinect_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.kinect_cloud.height, _x.kinect_cloud.width))
      length = len(self.kinect_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.kinect_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.kinect_cloud.is_bigendian, _x.kinect_cloud.point_step, _x.kinect_cloud.row_step))
      _x = self.kinect_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.kinect_cloud.is_dense))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.registration_images is None:
        self.registration_images = None
      if self.registration_transforms is None:
        self.registration_transforms = None
      if self.kinect_image is None:
        self.kinect_image = sensor_msgs.msg.Image()
      if self.kinect_cloud is None:
        self.kinect_cloud = sensor_msgs.msg.PointCloud2()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.registration_images = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Image()
        _v13 = val1.header
        start = end
        end += 4
        (_v13.seq,) = _struct_I.unpack(str[start:end])
        _v14 = _v13.stamp
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.frame_id = str[start:end].decode('utf-8')
        else:
          _v13.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.encoding = str[start:end].decode('utf-8')
        else:
          val1.encoding = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _struct_BI.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.registration_images.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.registration_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v15 = val1.translation
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = val1.rotation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.registration_transforms.append(val1)
      _x = self
      start = end
      end += 12
      (_x.kinect_image.header.seq, _x.kinect_image.header.stamp.secs, _x.kinect_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.kinect_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.kinect_image.height, _x.kinect_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_image.encoding = str[start:end].decode('utf-8')
      else:
        self.kinect_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.kinect_image.is_bigendian, _x.kinect_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_image.data = str[start:end].decode('utf-8')
      else:
        self.kinect_image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.kinect_cloud.header.seq, _x.kinect_cloud.header.stamp.secs, _x.kinect_cloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_cloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.kinect_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.kinect_cloud.height, _x.kinect_cloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.kinect_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.kinect_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.kinect_cloud.is_bigendian, _x.kinect_cloud.point_step, _x.kinect_cloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.kinect_cloud.is_bigendian = bool(self.kinect_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinect_cloud.data = str[start:end].decode('utf-8')
      else:
        self.kinect_cloud.data = str[start:end]
      start = end
      end += 1
      (self.kinect_cloud.is_dense,) = _struct_B.unpack(str[start:end])
      self.kinect_cloud.is_dense = bool(self.kinect_cloud.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_B = struct.Struct("<B")
_struct_BI = struct.Struct("<BI")
_struct_3I = struct.Struct("<3I")
_struct_B2I = struct.Struct("<B2I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from register_kinect_to_model/registerKinectToModelResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class registerKinectToModelResponse(genpy.Message):
  _md5sum = "970b90301a0fcacf19823fc570a259a1"
  _type = "register_kinect_to_model/registerKinectToModelResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Transform output_transform

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['output_transform']
  _slot_types = ['geometry_msgs/Transform']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       output_transform

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(registerKinectToModelResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.output_transform is None:
        self.output_transform = geometry_msgs.msg.Transform()
    else:
      self.output_transform = geometry_msgs.msg.Transform()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.output_transform.translation.x, _x.output_transform.translation.y, _x.output_transform.translation.z, _x.output_transform.rotation.x, _x.output_transform.rotation.y, _x.output_transform.rotation.z, _x.output_transform.rotation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.output_transform is None:
        self.output_transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.output_transform.translation.x, _x.output_transform.translation.y, _x.output_transform.translation.z, _x.output_transform.rotation.x, _x.output_transform.rotation.y, _x.output_transform.rotation.z, _x.output_transform.rotation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.output_transform.translation.x, _x.output_transform.translation.y, _x.output_transform.translation.z, _x.output_transform.rotation.x, _x.output_transform.rotation.y, _x.output_transform.rotation.z, _x.output_transform.rotation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.output_transform is None:
        self.output_transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.output_transform.translation.x, _x.output_transform.translation.y, _x.output_transform.translation.z, _x.output_transform.rotation.x, _x.output_transform.rotation.y, _x.output_transform.rotation.z, _x.output_transform.rotation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
class registerKinectToModel(object):
  _type          = 'register_kinect_to_model/registerKinectToModel'
  _md5sum = '17db16533cb0c8ca17391ef9436a03a0'
  _request_class  = registerKinectToModelRequest
  _response_class = registerKinectToModelResponse
